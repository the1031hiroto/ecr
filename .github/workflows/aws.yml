name: Deploy to Amazon ECS

on:
  push:
    branches:
      - "main"

env:
  AWS_REGION: ap-northeast-1
  STACK_NAME: soda-demo

permissions:
  id-token: write
  contents: read


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-${{ github.job }}-${{ github.run_id }}-${{ github.run_attempt }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Stack Info
      id: get-stack-info
      run: |
        STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} | jq -r '.Stacks[].Outputs[]')
        echo "::set-output name=repository-name::$(echo $STACK_OUTPUTS | jq -r '. | select(.OutputKey == "ECRRepository") | .OutputValue')"
        echo "::set-output name=codedeploy-app-name::$(echo $STACK_OUTPUTS | jq -r '. | select(.OutputKey == "CodeDeployApplication") | .OutputValue')"
        echo "::set-output name=codedeploy-group-name::$(echo $STACK_OUTPUTS | jq -r '. | select(.OutputKey == "CodeDeployDeploymentGroup") | .OutputValue')"
        TASK_NAME=$(echo $STACK_OUTPUTS | jq -r '. | select(.OutputKey == "TaskDefinition") | .OutputValue')
        aws ecs describe-task-definition --task-definition $TASK_NAME --query taskDefinition > aws/task-definition.json
        echo "::set-output name=container-name::$(cat aws/task-definition.json | jq -r -r '.containerDefinitions[].name')"
        echo "::set-output name=cluser-name::$(echo $STACK_OUTPUTS | jq -r '. | select(.OutputKey == "ClusterName") | .OutputValue')"
        echo "::set-output name=service-name::$(echo $STACK_OUTPUTS | jq -r '. | select(.OutputKey == "ServiceName") | .OutputValue')"


    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      uses: docker/build-push-action@v2
      id: build-image
      with:
        push: true
        tags: ${{ steps.get-stack-info.outputs.repository-name }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws/task-definition.json
        container-name: ${{ steps.get-stack-info.outputs.container-name }}
        image: ${{ steps.get-stack-info.outputs.repository-name }}:latest

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        cluster: ${{ steps.get-stack-info.outputs.cluser-name }}
        service: ${{ steps.get-stack-info.outputs.service-name }}
        wait-for-service-stability: true
        codedeploy-appspec: aws/appspec.yml
        codedeploy-application: ${{ steps.get-stack-info.outputs.codedeploy-app-name }}
        codedeploy-deployment-group: ${{ steps.get-stack-info.outputs.codedeploy-group-name }}
