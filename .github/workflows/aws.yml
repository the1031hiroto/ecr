name: Deploy to Amazon ECS

on:
  push:
    branches:
      - "main"

env:
  AWS_REGION: ap-northeast-1
  STACK_NAME: soda-demo

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Names
      run: |
        echo "REPOSITORY_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} | jq -r '.Stacks[].Outputs[]  | select(.OutputKey == "ECRRepository") | .OutputValue')" >> $GITHUB_ENV
        echo "TASK_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} | jq -r '.Stacks[].Outputs[]  | select(.OutputKey == "TaskDefinition") | .OutputValue')" >> $GITHUB_ENV
        echo "CODEDEPLOY_APP_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} | jq -r '.Stacks[].Outputs[]  | select(.OutputKey == "CodeDeployApplication") | .OutputValue')" >> $GITHUB_ENV
        echo "CODEDEPLOY_GROUP_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} | jq -r '.Stacks[].Outputs[]  | select(.OutputKey == "CodeDeployDeploymentGroup") | .OutputValue')" >> $GITHUB_ENV

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      uses: docker/build-push-action@v2
      id: build-image
      with:
        push: true
        tags: ${{ env.REPOSITORY_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Download Task Definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.TASK_NAME }} --query taskDefinition > aws/task-definition.json
        echo "CONTAINER_NAME=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_NAME }} --query taskDefinition | jq -r '.containerDefinitions[].name')" >> $GITHUB_ENV

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws/task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.REPOSITORY_NAME }}:latest

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        wait-for-service-stability: true
        codedeploy-appspec: aws/appspec.yml
        codedeploy-application: ${{ env.CODEDEPLOY_APP_NAME }}
        codedeploy-deployment-group: ${{ env.CODEDEPLOY_GROUP_NAME }}
